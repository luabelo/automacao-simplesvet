from datetime import datetime
from .config import Config
from .logger import logger
from .simplesvet_actions import SimplesVetActions


class SimplesVetScraper:
    """Classe principal para orquestrar o scraping do SimplesVet"""
    
    def __init__(self):
        self.config = None
        self.simplesvet = None
    
    def validate_configuration(self, config: Config) -> bool:
        """
        Valida se a configura√ß√£o est√° correta antes de executar
        
        Args:
            config: Inst√¢ncia da configura√ß√£o
            
        Returns:
            True se a configura√ß√£o est√° v√°lida
        """
        logger.info("Validando configura√ß√£o...")

        if not config.validate_credentials():
            logger.error("‚ùå Credenciais n√£o configuradas corretamente!")
            logger.error("   Por favor, edite o arquivo config/config.json e configure:")
            logger.error("   - email: Seu email de login do SimplesVet")
            logger.error("   - password: Sua senha do SimplesVet")
            return False
        
        start_date, end_date = config.get_date_range()
        if not start_date or not end_date:
            logger.error("‚ùå Per√≠odo de datas n√£o configurado!")
            logger.error("   Configure start_date e end_date no arquivo config/config.json")
            return False
        
        try:
            datetime.strptime(start_date, '%Y-%m-%d')
            datetime.strptime(end_date, '%Y-%m-%d')
        except ValueError:
            logger.error("‚ùå Formato de data inv√°lido! Use o formato YYYY-MM-DD")
            return False
        
        logger.info("‚úÖ Configura√ß√£o v√°lida!")
        logger.info(f"   Email: {config.get_credential('simplesvet', 'email')}")
        logger.info(f"   Per√≠odo: {start_date} at√© {end_date}")
        
        return True
    
    def run(self) -> bool:
        """
        Executa o processo completo de scraping
        
        Returns:
            True se executado com sucesso
        """
        print("=" * 60)
        print("üè• SIMPLESVET SCRAPER")
        print("=" * 60)
        print()
        
        try:
            # Carrega configura√ß√£o
            logger.info("Carregando configura√ß√µes...")
            self.config = Config()
            
            # Valida configura√ß√£o
            if not self.validate_configuration(self.config):
                print("\n‚ùå Erro na configura√ß√£o. Verifique o arquivo config/config.json")
                return False
            
            print("\nüöÄ Iniciando automa√ß√£o...")
            
            # Inicializa as a√ß√µes do SimplesVet
            self.simplesvet = SimplesVetActions(self.config)
            
            try:
                # Inicia o navegador
                logger.info("Iniciando navegador...")
                if not self.simplesvet.start_browser():
                    logger.error("‚ùå Falha ao iniciar o navegador")
                    return False
                
                print("‚úÖ Navegador iniciado com sucesso")
                
                # Realiza login
                print("üîê Realizando login...")
                if not self.simplesvet.login():
                    logger.error("‚ùå Falha no login")
                    print("‚ùå Falha no login. Verifique suas credenciais.")
                    return False
                
                print("‚úÖ Login realizado com sucesso!")
                
                # Obt√©m per√≠odo configurado
                start_date, end_date = self.config.get_date_range()
                
                # Extrai dados de atendimentos
                print(f"üìã Extraindo atendimentos de {start_date} at√© {end_date}...")
                appointments = self.simplesvet.get_appointments_data(start_date, end_date)
                
                if appointments:
                    print(f"‚úÖ {len(appointments)} atendimentos extra√≠dos com sucesso!")
                    logger.info(f"Dados extra√≠dos: {len(appointments)} registros")
                else:
                    print("‚ö†Ô∏è  Nenhum atendimento encontrado no per√≠odo especificado")
                
                # Realiza logout
                print("üö™ Realizando logout...")
                self.simplesvet.logout()
                
            finally:
                # Fecha o navegador
                if self.simplesvet:
                    self.simplesvet.close_browser()
                    print("üîí Navegador fechado")
            
            print("\n‚úÖ Automa√ß√£o conclu√≠da com sucesso!")
            return True
            
        except KeyboardInterrupt:
            print("\n\n‚èπÔ∏è  Automa√ß√£o interrompida pelo usu√°rio")
            logger.info("Automa√ß√£o interrompida pelo usu√°rio")
            return False
            
        except Exception as e:
            logger.error(f"Erro inesperado: {e}")
            print(f"\n‚ùå Erro inesperado: {e}")
            return False